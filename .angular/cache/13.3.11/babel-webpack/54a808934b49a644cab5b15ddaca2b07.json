{"ast":null,"code":"import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport let BibliotechService = /*#__PURE__*/(() => {\n  class BibliotechService {\n    constructor(httpClient, cookieService) {\n      this.httpClient = httpClient;\n      this.cookieService = cookieService;\n      this.bookList = [];\n      this.collectionList = [];\n      this.userId = \"\";\n      this.jwtToken = \"\";\n      this.apiUrl = \"http://ec2-54-147-29-215.compute-1.amazonaws.com/\";\n    } // auth\n\n\n    register(register) {\n      return this.httpClient.post(this.apiUrl + \"auth/register\", {\n        password: register.password,\n        email: register.email,\n        firstName: register.firstName,\n        lastName: register.lastName\n      });\n    }\n\n    login(login) {\n      return this.httpClient.post(this.apiUrl + \"auth/login\", {\n        password: login.password,\n        email: login.email\n      });\n    } // books\n\n\n    getBooks() {\n      this.getUser();\n      const headers = new HttpHeaders({\n        Authorization: `${this.jwtToken}`\n      });\n      const params = new HttpParams().set(\"userId\", this.userId);\n      return this.httpClient.get(this.apiUrl + \"book/\", {\n        headers,\n        params\n      });\n    }\n\n    getBooksByCollection(collectionId) {\n      this.getUser();\n      const headers = new HttpHeaders({\n        Authorization: `${this.jwtToken}`\n      });\n      const params = new HttpParams().set(\"collectionId\", collectionId);\n      return this.httpClient.get(this.apiUrl + \"book/byCollection\", {\n        headers,\n        params\n      });\n    }\n\n    updateBook(book) {\n      this.getUser();\n      const headers = new HttpHeaders({\n        Authorization: `${this.jwtToken}`\n      });\n      return this.httpClient.put(this.apiUrl + \"book/\", {\n        id: book.id,\n        title: book.title,\n        authors: book.authors,\n        publishedYear: book.publishedYear,\n        description: book.description,\n        edition: book.edition,\n        isbn: book.isbn,\n        pageCount: book.pageCount,\n        categories: book.categories,\n        read: book.read,\n        collection: book.collection,\n        userId: this.userId\n      }, {\n        headers\n      });\n    }\n\n    saveBook(book) {\n      this.getUser();\n      const headers = new HttpHeaders({\n        Authorization: `${this.jwtToken}`\n      });\n      return this.httpClient.post(this.apiUrl + \"book/\", {\n        title: book.title,\n        authors: book.authors,\n        publishedYear: book.publishedYear,\n        description: book.description,\n        edition: book.edition,\n        isbn: book.isbn,\n        pageCount: book.pageCount,\n        categories: book.categories,\n        read: book.read,\n        collection: book.collection,\n        userId: this.userId\n      }, {\n        headers\n      });\n    }\n\n    removeBook(bookId) {\n      this.getUser();\n      const headers = new HttpHeaders({\n        Authorization: `${this.jwtToken}`\n      });\n      const body = {\n        userId: this.userId,\n        id: bookId\n      };\n      return this.httpClient.delete(this.apiUrl + \"book/\", {\n        headers,\n        body\n      });\n    } // collections\n\n\n    getCollections() {\n      this.getUser();\n      const headers = new HttpHeaders({\n        Authorization: `${this.jwtToken}`\n      });\n      const params = new HttpParams().set(\"userId\", this.userId);\n      return this.httpClient.get(this.apiUrl + \"collection/\", {\n        headers,\n        params\n      });\n    }\n\n    updateCollection(collection) {\n      this.getUser();\n      const headers = new HttpHeaders({\n        Authorization: `${this.jwtToken}`\n      }); // const params = new HttpParams().set(\"userId\", this.userId);\n\n      return this.httpClient.put(this.apiUrl + \"collection/\", {\n        id: collection.id,\n        title: collection.title,\n        description: collection.description\n      }, {\n        headers\n      });\n    }\n\n    saveCollection(collection) {\n      this.getUser();\n      const headers = new HttpHeaders({\n        Authorization: `${this.jwtToken}`\n      });\n      return this.httpClient.post(this.apiUrl + \"collection/\", {\n        title: collection.title,\n        description: collection.description,\n        userId: this.userId\n      }, {\n        headers\n      });\n    }\n\n    removeCollection(collectionId) {\n      this.getUser();\n      const headers = new HttpHeaders({\n        Authorization: `${this.jwtToken}`\n      });\n      const body = {\n        userId: this.userId,\n        id: collectionId\n      };\n      return this.httpClient.delete(this.apiUrl + \"collection/\", {\n        headers,\n        body\n      });\n    } // user\n\n\n    updateUser(register) {\n      this.getUser();\n      const headers = new HttpHeaders({\n        Authorization: `${this.jwtToken}`\n      });\n      const params = new HttpParams().set(\"userId\", this.userId);\n      return this.httpClient.put(this.apiUrl + \"me/\", {\n        firstName: register.firstName,\n        lastName: register.lastName\n      }, {\n        headers,\n        params\n      });\n    }\n\n    getUser() {\n      var _a, _b;\n\n      this.jwtToken = this.cookieService.get(\"user\");\n      this.user = JSON.parse(this.cookieService.get(\"userObject\"));\n      this.userId = ((_b = (_a = this.user) === null || _a === void 0 ? void 0 : _a.id) === null || _b === void 0 ? void 0 : _b.toString()) || \"\";\n    }\n\n  }\n\n  BibliotechService.ɵfac = function BibliotechService_Factory(t) {\n    return new (t || BibliotechService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n  };\n\n  BibliotechService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BibliotechService,\n    factory: BibliotechService.ɵfac,\n    providedIn: \"root\"\n  });\n  return BibliotechService;\n})();","map":null,"metadata":{},"sourceType":"module"}