{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport instances from '../../dom/instances';\nvar Default = {\n  placement: 'center',\n  backdropClasses: 'bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0 z-40',\n  backdrop: 'dynamic',\n  closable: true,\n  onHide: function () {},\n  onShow: function () {},\n  onToggle: function () {}\n};\nvar DefaultInstanceOptions = {\n  id: null,\n  override: true\n};\n\nvar Modal =\n/** @class */\nfunction () {\n  function Modal(targetEl, options, instanceOptions) {\n    if (targetEl === void 0) {\n      targetEl = null;\n    }\n\n    if (options === void 0) {\n      options = Default;\n    }\n\n    if (instanceOptions === void 0) {\n      instanceOptions = DefaultInstanceOptions;\n    }\n\n    this._eventListenerInstances = [];\n    this._instanceId = instanceOptions.id ? instanceOptions.id : targetEl.id;\n    this._targetEl = targetEl;\n    this._options = __assign(__assign({}, Default), options);\n    this._isHidden = true;\n    this._backdropEl = null;\n    this._initialized = false;\n    this.init();\n    instances.addInstance('Modal', this, this._instanceId, instanceOptions.override);\n  }\n\n  Modal.prototype.init = function () {\n    var _this = this;\n\n    if (this._targetEl && !this._initialized) {\n      this._getPlacementClasses().map(function (c) {\n        _this._targetEl.classList.add(c);\n      });\n\n      this._initialized = true;\n    }\n  };\n\n  Modal.prototype.destroy = function () {\n    if (this._initialized) {\n      this.removeAllEventListenerInstances();\n\n      this._destroyBackdropEl();\n\n      this._initialized = false;\n    }\n  };\n\n  Modal.prototype.removeInstance = function () {\n    instances.removeInstance('Modal', this._instanceId);\n  };\n\n  Modal.prototype.destroyAndRemoveInstance = function () {\n    this.destroy();\n    this.removeInstance();\n  };\n\n  Modal.prototype._createBackdrop = function () {\n    var _a;\n\n    if (this._isHidden) {\n      var backdropEl = document.createElement('div');\n      backdropEl.setAttribute('modal-backdrop', '');\n\n      (_a = backdropEl.classList).add.apply(_a, this._options.backdropClasses.split(' '));\n\n      document.querySelector('body').append(backdropEl);\n      this._backdropEl = backdropEl;\n    }\n  };\n\n  Modal.prototype._destroyBackdropEl = function () {\n    if (!this._isHidden) {\n      document.querySelector('[modal-backdrop]').remove();\n    }\n  };\n\n  Modal.prototype._setupModalCloseEventListeners = function () {\n    var _this = this;\n\n    if (this._options.backdrop === 'dynamic') {\n      this._clickOutsideEventListener = function (ev) {\n        _this._handleOutsideClick(ev.target);\n      };\n\n      this._targetEl.addEventListener('click', this._clickOutsideEventListener, true);\n    }\n\n    this._keydownEventListener = function (ev) {\n      if (ev.key === 'Escape') {\n        _this.hide();\n      }\n    };\n\n    document.body.addEventListener('keydown', this._keydownEventListener, true);\n  };\n\n  Modal.prototype._removeModalCloseEventListeners = function () {\n    if (this._options.backdrop === 'dynamic') {\n      this._targetEl.removeEventListener('click', this._clickOutsideEventListener, true);\n    }\n\n    document.body.removeEventListener('keydown', this._keydownEventListener, true);\n  };\n\n  Modal.prototype._handleOutsideClick = function (target) {\n    if (target === this._targetEl || target === this._backdropEl && this.isVisible()) {\n      this.hide();\n    }\n  };\n\n  Modal.prototype._getPlacementClasses = function () {\n    switch (this._options.placement) {\n      // top\n      case 'top-left':\n        return ['justify-start', 'items-start'];\n\n      case 'top-center':\n        return ['justify-center', 'items-start'];\n\n      case 'top-right':\n        return ['justify-end', 'items-start'];\n      // center\n\n      case 'center-left':\n        return ['justify-start', 'items-center'];\n\n      case 'center':\n        return ['justify-center', 'items-center'];\n\n      case 'center-right':\n        return ['justify-end', 'items-center'];\n      // bottom\n\n      case 'bottom-left':\n        return ['justify-start', 'items-end'];\n\n      case 'bottom-center':\n        return ['justify-center', 'items-end'];\n\n      case 'bottom-right':\n        return ['justify-end', 'items-end'];\n\n      default:\n        return ['justify-center', 'items-center'];\n    }\n  };\n\n  Modal.prototype.toggle = function () {\n    if (this._isHidden) {\n      this.show();\n    } else {\n      this.hide();\n    } // callback function\n\n\n    this._options.onToggle(this);\n  };\n\n  Modal.prototype.show = function () {\n    if (this.isHidden) {\n      this._targetEl.classList.add('flex');\n\n      this._targetEl.classList.remove('hidden');\n\n      this._targetEl.setAttribute('aria-modal', 'true');\n\n      this._targetEl.setAttribute('role', 'dialog');\n\n      this._targetEl.removeAttribute('aria-hidden');\n\n      this._createBackdrop();\n\n      this._isHidden = false; // Add keyboard event listener to the document\n\n      if (this._options.closable) {\n        this._setupModalCloseEventListeners();\n      } // prevent body scroll\n\n\n      document.body.classList.add('overflow-hidden'); // callback function\n\n      this._options.onShow(this);\n    }\n  };\n\n  Modal.prototype.hide = function () {\n    if (this.isVisible) {\n      this._targetEl.classList.add('hidden');\n\n      this._targetEl.classList.remove('flex');\n\n      this._targetEl.setAttribute('aria-hidden', 'true');\n\n      this._targetEl.removeAttribute('aria-modal');\n\n      this._targetEl.removeAttribute('role');\n\n      this._destroyBackdropEl();\n\n      this._isHidden = true; // re-apply body scroll\n\n      document.body.classList.remove('overflow-hidden');\n\n      if (this._options.closable) {\n        this._removeModalCloseEventListeners();\n      } // callback function\n\n\n      this._options.onHide(this);\n    }\n  };\n\n  Modal.prototype.isVisible = function () {\n    return !this._isHidden;\n  };\n\n  Modal.prototype.isHidden = function () {\n    return this._isHidden;\n  };\n\n  Modal.prototype.addEventListenerInstance = function (element, type, handler) {\n    this._eventListenerInstances.push({\n      element: element,\n      type: type,\n      handler: handler\n    });\n  };\n\n  Modal.prototype.removeAllEventListenerInstances = function () {\n    this._eventListenerInstances.map(function (eventListenerInstance) {\n      eventListenerInstance.element.removeEventListener(eventListenerInstance.type, eventListenerInstance.handler);\n    });\n\n    this._eventListenerInstances = [];\n  };\n\n  Modal.prototype.getAllEventListenerInstances = function () {\n    return this._eventListenerInstances;\n  };\n\n  Modal.prototype.updateOnShow = function (callback) {\n    this._options.onShow = callback;\n  };\n\n  Modal.prototype.updateOnHide = function (callback) {\n    this._options.onHide = callback;\n  };\n\n  Modal.prototype.updateOnToggle = function (callback) {\n    this._options.onToggle = callback;\n  };\n\n  return Modal;\n}();\n\nexport function initModals() {\n  // initiate modal based on data-modal-target\n  document.querySelectorAll('[data-modal-target]').forEach(function ($triggerEl) {\n    var modalId = $triggerEl.getAttribute('data-modal-target');\n    var $modalEl = document.getElementById(modalId);\n\n    if ($modalEl) {\n      var placement = $modalEl.getAttribute('data-modal-placement');\n      var backdrop = $modalEl.getAttribute('data-modal-backdrop');\n      new Modal($modalEl, {\n        placement: placement ? placement : Default.placement,\n        backdrop: backdrop ? backdrop : Default.backdrop\n      });\n    } else {\n      console.error(\"Modal with id \".concat(modalId, \" does not exist. Are you sure that the data-modal-target attribute points to the correct modal id?.\"));\n    }\n  }); // toggle modal visibility\n\n  document.querySelectorAll('[data-modal-toggle]').forEach(function ($triggerEl) {\n    var modalId = $triggerEl.getAttribute('data-modal-toggle');\n    var $modalEl = document.getElementById(modalId);\n\n    if ($modalEl) {\n      var modal_1 = instances.getInstance('Modal', modalId);\n\n      if (modal_1) {\n        var toggleModal = function () {\n          modal_1.toggle();\n        };\n\n        $triggerEl.addEventListener('click', toggleModal);\n        modal_1.addEventListenerInstance($triggerEl, 'click', toggleModal);\n      } else {\n        console.error(\"Modal with id \".concat(modalId, \" has not been initialized. Please initialize it using the data-modal-target attribute.\"));\n      }\n    } else {\n      console.error(\"Modal with id \".concat(modalId, \" does not exist. Are you sure that the data-modal-toggle attribute points to the correct modal id?\"));\n    }\n  }); // show modal on click if exists based on id\n\n  document.querySelectorAll('[data-modal-show]').forEach(function ($triggerEl) {\n    var modalId = $triggerEl.getAttribute('data-modal-show');\n    var $modalEl = document.getElementById(modalId);\n\n    if ($modalEl) {\n      var modal_2 = instances.getInstance('Modal', modalId);\n\n      if (modal_2) {\n        var showModal = function () {\n          modal_2.show();\n        };\n\n        $triggerEl.addEventListener('click', showModal);\n        modal_2.addEventListenerInstance($triggerEl, 'click', showModal);\n      } else {\n        console.error(\"Modal with id \".concat(modalId, \" has not been initialized. Please initialize it using the data-modal-target attribute.\"));\n      }\n    } else {\n      console.error(\"Modal with id \".concat(modalId, \" does not exist. Are you sure that the data-modal-show attribute points to the correct modal id?\"));\n    }\n  }); // hide modal on click if exists based on id\n\n  document.querySelectorAll('[data-modal-hide]').forEach(function ($triggerEl) {\n    var modalId = $triggerEl.getAttribute('data-modal-hide');\n    var $modalEl = document.getElementById(modalId);\n\n    if ($modalEl) {\n      var modal_3 = instances.getInstance('Modal', modalId);\n\n      if (modal_3) {\n        var hideModal = function () {\n          modal_3.hide();\n        };\n\n        $triggerEl.addEventListener('click', hideModal);\n        modal_3.addEventListenerInstance($triggerEl, 'click', hideModal);\n      } else {\n        console.error(\"Modal with id \".concat(modalId, \" has not been initialized. Please initialize it using the data-modal-target attribute.\"));\n      }\n    } else {\n      console.error(\"Modal with id \".concat(modalId, \" does not exist. Are you sure that the data-modal-hide attribute points to the correct modal id?\"));\n    }\n  });\n}\n\nif (typeof window !== 'undefined') {\n  window.Modal = Modal;\n  window.initModals = initModals;\n}\n\nexport default Modal; //# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module"}